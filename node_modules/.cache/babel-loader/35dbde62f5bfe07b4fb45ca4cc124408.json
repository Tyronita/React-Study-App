{"ast":null,"code":"import _defineProperty from \"/home/gonk/code/CS/spam/evan/app/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/gonk/code/CS/spam/evan/app/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/gonk/code/CS/spam/evan/app/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gonk/code/CS/spam/evan/app/React-Study-App/src/pages/GraphPage.tsx\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*\r\nTODO:\r\n- change which days to display\r\n- which subjects to display \r\n- mood selection\r\n\r\nDo the same for pie chart^\r\n\r\n */\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line, Pie } from 'react-chartjs-2';\nimport \"../styles/GraphPage.css\";\nimport fakedata from \"../fakedata/fake_data.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nexport var options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Time Spent Studying'\n    }\n  }\n};\n/* NOTE(gonk): This data stuff is just test code */\n\nvar monthLabels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar weekDaysLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\nvar howManyDaysMonth = {\n  \"January\": 31,\n  \"February\": 28,\n  \"March\": 31,\n  \"April\": 30,\n  \"May\": 31,\n  \"June\": 30,\n  \"July\": 31,\n  \"August\": 30,\n  \"September\": 30,\n  \"October\": 31,\n  \"November\": 30,\n  \"December\": 31\n};\nvar days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'];\nvar subjects = [\"Photography\", \"Music\", \"Maths\", \"Computer Science\", \"Chemistry\"];\n/* Returns an object {subject: False} for all subjects*/\n\nfunction getSubjectsDisplayedDefaultValue() {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(subjects),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var s = _step.value;\n      result[s] = false;\n    } // Set first two to true\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  result[subjects[0]] = true;\n  result[subjects[1]] = true;\n  return result;\n}\n\nfunction getStartingDataForGraph() {\n  return {\n    labels: [],\n    datasets: []\n  };\n}\n\nexport default function GraphPage() {\n  var _this = this;\n\n  var _useState = useState(\"January\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      monthBeingDisplayed = _useState2[0],\n      setMonthBeingDisplayed = _useState2[1];\n\n  var _useState3 = useState(getSubjectsDisplayedDefaultValue()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      subjectsDisplayed = _useState4[0],\n      setSubjectsDisplayed = _useState4[1];\n\n  var _useState5 = useState(\"line\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      chartType = _useState6[0],\n      setChartType = _useState6[1];\n\n  var _useState7 = useState(getStartingDataForGraph()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lineChartData = _useState8[0],\n      setLineChartData = _useState8[1];\n\n  var _useState9 = useState(getStartingDataForGraph()),\n      _useState10 = _slicedToArray(_useState9, 2),\n      pieChartData = _useState10[0],\n      setPieChartData = _useState10[1];\n\n  var borderColors = {\n    \"Maths\": \"rgba(255, 99, 132)\",\n    \"Photography\": \"rgba(26, 250, 132)\",\n    \"Music\": \"rgba(150, 0, 230)\",\n    \"Computer Science\": \"rgba(150, 99, 132)\",\n    \"Chemistry\": \"rgba(50, 255, 50)\"\n  };\n  var backgroundColors = {\n    \"Maths\": \"rgba(255, 99, 132, 0.5)\",\n    \"Photography\": \"rgba(26, 250, 132, 0.5)\",\n    \"Music\": \"rgba(150, 0, 230, 0.5)\",\n    \"Computer Science\": \"rgba(150, 99, 132, 0.5)\",\n    \"Chemistry\": \"rgba(50, 255, 50, 0.5)\"\n  };\n  /* ==========\r\n   * LINE GRAPH\r\n   * ========== */\n\n  function updateLineGraphData() {\n    // Get dataset for every subject that is turned on\n    var _datasets = [];\n\n    var _iterator2 = _createForOfIteratorHelper(subjects),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var subject = _step2.value;\n\n        if (subjectsDisplayed[subject]) {\n          _datasets.push({\n            tension: 0.2,\n            label: subject,\n            data: fakedata[subject][monthBeingDisplayed],\n            borderColor: borderColors[subject],\n            backgroundColor: backgroundColors[subject]\n          });\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    setLineChartData({\n      labels: days.slice(0, howManyDaysMonth[monthBeingDisplayed]),\n      datasets: _datasets\n    });\n  }\n  /* =========\r\n   * PIE GRAPH\r\n   * ========= */\n\n\n  function updatePieGraphData() {\n    var _labels = [];\n    var _data = [];\n\n    var _iterator3 = _createForOfIteratorHelper(subjects),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var subject = _step3.value;\n\n        if (subjectsDisplayed[subject]) {\n          _labels.push(subject); // Calculate total days studied for that month of that subject\n\n\n          _data.push(fakedata[subject][monthBeingDisplayed].reduce(function (partialSum, a) {\n            return partialSum + a;\n          }, 0));\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    setPieChartData({\n      labels: _labels,\n      datasets: [{\n        label: '# of Hours Studied',\n        data: _data,\n        backgroundColor: Object.values(backgroundColors),\n        borderColor: Object.values(borderColors),\n        borderWidth: 1\n      }]\n    });\n  }\n\n  function updateGraphData() {\n    updateLineGraphData();\n    updatePieGraphData();\n  }\n\n  useEffect(function () {\n    updateGraphData(); // This is be executed when the state changes\n  }, [monthBeingDisplayed]);\n  useEffect(function () {\n    updateGraphData(); // This is be executed when the state changes\n  }, [subjectsDisplayed]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GraphContainer2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"GraphPageBtn\",\n    onClick: function onClick() {\n      setChartType(\"line\");\n    },\n    disabled: chartType === \"line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, \"Line Chart\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"verticalBarDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"GraphPageBtn\",\n    onClick: function onClick() {\n      setChartType(\"pie\");\n    },\n    disabled: chartType === \"pie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, \"Pie Chart\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GraphContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"50%\",\n      width: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, chartType === \"line\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 33\n    }\n  }, \"Line chart\"), /*#__PURE__*/React.createElement(Line, {\n    options: options,\n    data: lineChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 33\n    }\n  }))), chartType === \"pie\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"80%\",\n      width: \"80%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 33\n    }\n  }, \"Pie Chart\"), /*#__PURE__*/React.createElement(Pie, {\n    data: pieChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: function onChange(e) {\n      return setMonthBeingDisplayed(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, monthLabels.map(function (element, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: element,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 33\n      }\n    }, element);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, subjects.map(function (element, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"checkboxText\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: subjectsDisplayed[element],\n      onChange: function onChange(e) {\n        setSubjectsDisplayed(_objectSpread({}, subjectsDisplayed, _defineProperty({}, element, e.target.checked)));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 37\n      }\n    }, element));\n  }))));\n}","map":{"version":3,"sources":["/home/gonk/code/CS/spam/evan/app/React-Study-App/src/pages/GraphPage.tsx"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","Pie","fakedata","register","options","responsive","plugins","legend","position","title","display","text","monthLabels","weekDaysLabels","howManyDaysMonth","days","subjects","getSubjectsDisplayedDefaultValue","result","s","getStartingDataForGraph","labels","datasets","GraphPage","monthBeingDisplayed","setMonthBeingDisplayed","subjectsDisplayed","setSubjectsDisplayed","chartType","setChartType","lineChartData","setLineChartData","pieChartData","setPieChartData","borderColors","backgroundColors","updateLineGraphData","_datasets","subject","push","tension","label","data","borderColor","backgroundColor","slice","updatePieGraphData","_labels","_data","reduce","partialSum","a","Object","values","borderWidth","updateGraphData","minHeight","height","width","e","target","value","map","element","index","checked"],"mappings":"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","sourcesContent":["/*\r\nTODO:\r\n- change which days to display\r\n- which subjects to display \r\n- mood selection\r\n\r\nDo the same for pie chart^\r\n\r\n */\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n    ChartData,\r\n} from 'chart.js';\r\nimport { Line, Pie } from 'react-chartjs-2';\r\n\r\nimport \"../styles/GraphPage.css\";\r\nimport fakedata from \"../fakedata/fake_data.js\";\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n);\r\n\r\nexport const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            position: 'top' as const,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Time Spent Studying',\r\n        },\r\n    },\r\n};\r\n\r\n/* NOTE(gonk): This data stuff is just test code */\r\n\r\nconst monthLabels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nconst weekDaysLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\nconst howManyDaysMonth = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":30, \"September\":30, \"October\":31, \"November\":30, \"December\":31};\r\nconst days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'];\r\n\r\nconst subjects = [\"Photography\", \"Music\", \"Maths\", \"Computer Science\", \"Chemistry\"];\r\n\r\n/* Returns an object {subject: False} for all subjects*/\r\nfunction getSubjectsDisplayedDefaultValue()\r\n{\r\n    const result: {[key:string]: boolean} = {};\r\n    for (const s of subjects)\r\n    {\r\n        result[s] = false;\r\n    }\r\n    // Set first two to true\r\n    result[subjects[0]] = true;\r\n    result[subjects[1]] = true;\r\n    return result;\r\n}\r\n\r\nfunction getStartingDataForGraph()\r\n{\r\n    return {labels:[], datasets: []};\r\n}\r\n\r\nexport default function GraphPage() {\r\n    const [monthBeingDisplayed, setMonthBeingDisplayed] = useState(\"January\");\r\n    const [subjectsDisplayed, setSubjectsDisplayed] = useState(getSubjectsDisplayedDefaultValue());\r\n\r\n    const [chartType, setChartType] = useState<\"line\" | \"pie\">(\"line\");\r\n    const [lineChartData, setLineChartData] = useState<ChartData<'line'>>(\r\n        getStartingDataForGraph()\r\n    );\r\n    const [pieChartData, setPieChartData] = useState<ChartData<'pie'>>(\r\n        getStartingDataForGraph()\r\n    );\r\n\r\n    const borderColors: { [key: string]: string; } = {\r\n        \"Maths\": \"rgba(255, 99, 132)\",\r\n        \"Photography\": \"rgba(26, 250, 132)\",\r\n        \"Music\": \"rgba(150, 0, 230)\",\r\n        \"Computer Science\": \"rgba(150, 99, 132)\",\r\n        \"Chemistry\": \"rgba(50, 255, 50)\",\r\n    };\r\n\r\n    const backgroundColors: { [key: string]: string; } = {\r\n        \"Maths\": \"rgba(255, 99, 132, 0.5)\",\r\n        \"Photography\": \"rgba(26, 250, 132, 0.5)\",\r\n        \"Music\": \"rgba(150, 0, 230, 0.5)\",\r\n        \"Computer Science\": \"rgba(150, 99, 132, 0.5)\",\r\n        \"Chemistry\": \"rgba(50, 255, 50, 0.5)\",\r\n    };\r\n\r\n\r\n    /* ==========\r\n     * LINE GRAPH\r\n     * ========== */\r\n    function updateLineGraphData(): void {\r\n        // Get dataset for every subject that is turned on\r\n        let _datasets: any = [];\r\n        for (const subject of subjects) {\r\n            if (subjectsDisplayed[subject]) {\r\n                _datasets.push({\r\n                    tension: 0.2,\r\n                    label: subject,\r\n                    data: fakedata[subject as keyof typeof fakedata][monthBeingDisplayed as keyof typeof fakedata[\"Maths\"]],\r\n                    borderColor: borderColors[subject],\r\n                    backgroundColor: backgroundColors[subject],\r\n                });\r\n            }\r\n        }\r\n\r\n        setLineChartData({\r\n            labels: days.slice(0, howManyDaysMonth[monthBeingDisplayed as keyof typeof howManyDaysMonth]),\r\n            datasets: _datasets,\r\n        })\r\n    }\r\n\r\n    /* =========\r\n     * PIE GRAPH\r\n     * ========= */\r\n    function updatePieGraphData(): void {\r\n        let _labels: string[] = [];\r\n        let _data:   number[] = [];\r\n\r\n        for (const subject of subjects) {\r\n            if (subjectsDisplayed[subject]) {\r\n                _labels.push(subject);\r\n\r\n                // Calculate total days studied for that month of that subject\r\n                _data.push(\r\n                    (fakedata[subject as keyof typeof fakedata][monthBeingDisplayed as keyof typeof fakedata[\"Maths\"]]).reduce((partialSum, a) => partialSum + a, 0)\r\n                );\r\n            }\r\n        }\r\n\r\n        setPieChartData({\r\n            labels: _labels,\r\n            datasets: [\r\n              {\r\n                  label: '# of Hours Studied',\r\n                  data: _data,\r\n                  backgroundColor: Object.values(backgroundColors),\r\n                  borderColor: Object.values(borderColors),\r\n                  borderWidth: 1,\r\n              },\r\n            ],\r\n          })\r\n    }\r\n\r\n\r\n    function updateGraphData(): void {\r\n        updateLineGraphData();\r\n        updatePieGraphData();\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateGraphData(); // This is be executed when the state changes\r\n    }, [monthBeingDisplayed]);\r\n\r\n    useEffect(() => {\r\n        updateGraphData(); // This is be executed when the state changes\r\n    }, [subjectsDisplayed]);\r\n\r\n    return (\r\n        <div style={{minHeight: \"100vh\"}}>\r\n\r\n            <div className={\"GraphContainer2\"}>\r\n                <button className={\"GraphPageBtn\"}\r\n                        onClick={() => {setChartType(\"line\")}}\r\n                        disabled={chartType === \"line\"}\r\n                >\r\n                    Line Chart\r\n                </button>\r\n                <div className={\"verticalBarDiv\"}></div>\r\n                <button className={\"GraphPageBtn\"}\r\n                        onClick={() => {setChartType(\"pie\")}}\r\n                        disabled={chartType === \"pie\"}\r\n                >\r\n                    Pie Chart\r\n                </button>\r\n            </div>\r\n\r\n            <div className={\"GraphContainer\"}>\r\n                <div style={{height: \"50%\", width: \"50%\"}}>\r\n                    { chartType === \"line\" && (\r\n                        <>\r\n                            <div style={{height: \"100%\", width: \"100%\"}}>\r\n                                <h2>Line chart</h2>\r\n                                <Line options={options} data={lineChartData} />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                    { chartType === \"pie\" && (\r\n                        <>\r\n                            <div style={{height: \"80%\", width: \"80%\"}}>\r\n                                <h2>Pie Chart</h2>\r\n                                <Pie data={pieChartData} />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    <select onChange={(e: any) => setMonthBeingDisplayed(e.target.value)}>\r\n                        {\r\n                            monthLabels.map((element, index) => (\r\n                                <option value={element} key={index}>{element}</option>\r\n                            ))\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        subjects.map((element, index) => {\r\n                            return (\r\n                                <div key={index} className={\"checkboxText\"}>\r\n                                    <input type=\"checkbox\" checked={subjectsDisplayed[element]}\r\n                                        onChange={(e) => {\r\n                                            setSubjectsDisplayed({\r\n                                                ...subjectsDisplayed,\r\n                                                [element]: e.target.checked,\r\n                                            });\r\n                                        }}/>\r\n                                    <p>{element}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
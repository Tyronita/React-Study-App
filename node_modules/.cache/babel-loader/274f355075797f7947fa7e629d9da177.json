{"ast":null,"code":"import _defineProperty from \"/home/gonk/code/CS/spam/evan/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/gonk/code/CS/spam/evan/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/gonk/code/CS/spam/evan/React-Study-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gonk/code/CS/spam/evan/React-Study-App/src/pages/GraphPage.tsx\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*\r\nTODO:\r\n- change which days to display\r\n- which subjects to display \r\n- mood selection\r\n\r\nDo the same for pie chart^\r\n\r\n */\nimport React, { useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line, Pie } from 'react-chartjs-2';\nimport \"../styles/GraphPage.css\";\nimport fakedata from \"../fakedata/fake_data.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nexport var options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Time Spent Studying'\n    }\n  }\n};\n/* NOTE(gonk): This data stuff is just test code */\n\nvar monthLabels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar weekDaysLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\nvar howManyDaysMonth = {\n  \"January\": 31,\n  \"February\": 28,\n  \"March\": 31,\n  \"April\": 30,\n  \"May\": 31,\n  \"June\": 30,\n  \"July\": 31,\n  \"August\": 30,\n  \"September\": 30,\n  \"October\": 31,\n  \"November\": 30,\n  \"December\": 31\n};\nvar days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'];\nvar subjects = [\"Photograph\", \"Music\", \"Maths\", \"Computer Science\", \"Chemistry\"];\nexport var pieData = {\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n  datasets: [{\n    label: '# of Votes',\n    data: [12, 19, 3, 5, 2, 3],\n    backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n    borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n    borderWidth: 1\n  }]\n};\n/* Returns an object {subject: False} for all subjects*/\n\nfunction getSubjectsDisplayedDefaultValue() {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(subjects),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var s = _step.value;\n      result[s] = false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  result[subjects[0]] = true; // Set first one as true\n\n  return result;\n}\n\nfunction getStartingDataForLineGraph() {\n  return {\n    labels: [],\n    datasets: []\n  };\n}\n\nexport default function GraphPage() {\n  var _this = this;\n\n  var _useState = useState(\"January\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      monthBeingDisplayed = _useState2[0],\n      setMonthBeingDisplayed = _useState2[1];\n\n  var _useState3 = useState(getSubjectsDisplayedDefaultValue()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      subjectsDisplayed = _useState4[0],\n      setSubjectsDisplayed = _useState4[1];\n\n  var _useState5 = useState(\"line\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      chartType = _useState6[0],\n      setChartType = _useState6[1];\n\n  var _useState7 = useState(getStartingDataForLineGraph()),\n      _useState8 = _slicedToArray(_useState7, 2),\n      lineChartData = _useState8[0],\n      setLineChartData = _useState8[1]; //function updateGraphData(): ChartData<'line'> {\n\n\n  function updateGraphData() {\n    var borderColor = 'rgb(255, 99, 132)';\n    var backgroundColor = 'rgba(255, 99, 132, 0.5)'; //console.log(monthBeingDisplayed);\n\n    setLineChartData({\n      labels: days.slice(0, howManyDaysMonth[monthBeingDisplayed]),\n      datasets: [{\n        tension: 0.1,\n        label: 'Total time',\n        data: fakedata[\"Maths\"][monthBeingDisplayed],\n        borderColor: borderColor,\n        backgroundColor: backgroundColor\n      }]\n    });\n  }\n\n  function handleOnChangeMonthPicker(e) {\n    //e.preventDefault();\n    console.log(monthBeingDisplayed);\n    console.log(e.target.value);\n    setMonthBeingDisplayed(e.target.value);\n    console.log(monthBeingDisplayed);\n    updateGraphData();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      minHeight: \"100vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GraphContainer2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"GraphPageBtn\",\n    onClick: function onClick() {\n      setChartType(\"line\");\n    },\n    disabled: chartType === \"line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, \"Line Chart\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"verticalBarDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"GraphPageBtn\",\n    onClick: function onClick() {\n      setChartType(\"pie\");\n    },\n    disabled: chartType === \"pie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, \"Pie Chart\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GraphContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"50%\",\n      width: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, chartType === \"line\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 29\n    }\n  }, \"Line chart\"), /*#__PURE__*/React.createElement(Line, {\n    options: options,\n    data: lineChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 29\n    }\n  })), chartType === \"pie\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  }, \"Pie Chart\"), /*#__PURE__*/React.createElement(Pie, {\n    data: pieData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleOnChangeMonthPicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, monthLabels.map(function (element, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: element,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, element);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, subjects.map(function (element, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"checkboxText\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: subjectsDisplayed[element],\n      onChange: function onChange(e) {\n        setSubjectsDisplayed(_objectSpread({}, subjectsDisplayed, _defineProperty({}, element, e.target.checked)));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 37\n      }\n    }, element));\n  }))));\n}","map":{"version":3,"sources":["/home/gonk/code/CS/spam/evan/React-Study-App/src/pages/GraphPage.tsx"],"names":["React","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","Pie","fakedata","register","options","responsive","plugins","legend","position","title","display","text","monthLabels","weekDaysLabels","howManyDaysMonth","days","subjects","pieData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","getSubjectsDisplayedDefaultValue","result","s","getStartingDataForLineGraph","GraphPage","monthBeingDisplayed","setMonthBeingDisplayed","subjectsDisplayed","setSubjectsDisplayed","chartType","setChartType","lineChartData","setLineChartData","updateGraphData","slice","tension","handleOnChangeMonthPicker","e","console","log","target","value","minHeight","height","width","map","element","index","checked"],"mappings":"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","sourcesContent":["/*\r\nTODO:\r\n- change which days to display\r\n- which subjects to display \r\n- mood selection\r\n\r\nDo the same for pie chart^\r\n\r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n    ChartData,\r\n} from 'chart.js';\r\nimport { Line, Pie } from 'react-chartjs-2';\r\n\r\nimport \"../styles/GraphPage.css\";\r\nimport fakedata from \"../fakedata/fake_data.js\";\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n);\r\n\r\nexport const options = {\r\n    responsive: true,\r\n    plugins: {\r\n        legend: {\r\n            position: 'top' as const,\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Time Spent Studying',\r\n        },\r\n    },\r\n};\r\n\r\n/* NOTE(gonk): This data stuff is just test code */\r\n\r\nconst monthLabels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\nconst weekDaysLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\nconst howManyDaysMonth = {\"January\":31, \"February\":28, \"March\":31, \"April\":30, \"May\":31, \"June\":30, \"July\":31, \"August\":30, \"September\":30, \"October\":31, \"November\":30, \"December\":31};\r\nconst days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'];\r\n\r\nconst subjects = [\"Photograph\", \"Music\", \"Maths\", \"Computer Science\", \"Chemistry\"];\r\n\r\nexport const pieData = {\r\n  labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n  datasets: [\r\n    {\r\n      label: '# of Votes',\r\n      data: [12, 19, 3, 5, 2, 3],\r\n      backgroundColor: [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)',\r\n        'rgba(255, 159, 64, 0.2)',\r\n      ],\r\n      borderColor: [\r\n        'rgba(255, 99, 132, 1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)',\r\n      ],\r\n      borderWidth: 1,\r\n    },\r\n  ],\r\n};\r\n\r\n/* Returns an object {subject: False} for all subjects*/\r\nfunction getSubjectsDisplayedDefaultValue()\r\n{\r\n    const result: {[key:string]: boolean} = {};\r\n    for (const s of subjects)\r\n    {\r\n        result[s] = false;\r\n    }\r\n    result[subjects[0]] = true; // Set first one as true\r\n    return result;\r\n}\r\n\r\nfunction getStartingDataForLineGraph()\r\n{\r\n    return {labels:[], datasets: []};\r\n}\r\n\r\nexport default function GraphPage() {\r\n    const [monthBeingDisplayed, setMonthBeingDisplayed] = useState(\"January\");\r\n    const [subjectsDisplayed, setSubjectsDisplayed] = useState(getSubjectsDisplayedDefaultValue());\r\n\r\n    const [chartType, setChartType] = useState<\"line\" | \"pie\">(\"line\");\r\n    const [lineChartData, setLineChartData] = useState<ChartData<'line'>>(\r\n        getStartingDataForLineGraph()\r\n    );\r\n\r\n    //function updateGraphData(): ChartData<'line'> {\r\n    function updateGraphData(): void {\r\n            \r\n        let borderColor: string = 'rgb(255, 99, 132)';\r\n        let backgroundColor: string = 'rgba(255, 99, 132, 0.5)';\r\n\r\n        //console.log(monthBeingDisplayed);\r\n\r\n        setLineChartData({\r\n            labels: days.slice(0, howManyDaysMonth[monthBeingDisplayed as keyof typeof howManyDaysMonth]),\r\n            datasets: [\r\n                {\r\n                    tension: 0.1,\r\n                    label: 'Total time',\r\n                    data: fakedata[\"Maths\" as keyof typeof fakedata][monthBeingDisplayed as keyof typeof fakedata[\"Maths\"]],\r\n                    borderColor: borderColor,\r\n                    backgroundColor: backgroundColor,\r\n                },\r\n            ],\r\n        })\r\n    }\r\n\r\n    function handleOnChangeMonthPicker(e: any)\r\n    {\r\n        //e.preventDefault();\r\n        console.log(monthBeingDisplayed);\r\n        console.log(e.target.value);\r\n        setMonthBeingDisplayed(e.target.value);\r\n        console.log(monthBeingDisplayed);\r\n        updateGraphData();\r\n    }\r\n\r\n    return (\r\n        <div style={{minHeight: \"100vh\"}}>\r\n\r\n            <div className={\"GraphContainer2\"}>\r\n                <button className={\"GraphPageBtn\"}\r\n                        onClick={() => {setChartType(\"line\")}}\r\n                        disabled={chartType === \"line\"}\r\n                >\r\n                    Line Chart\r\n                </button>\r\n                <div className={\"verticalBarDiv\"}></div>\r\n                <button className={\"GraphPageBtn\"}\r\n                        onClick={() => {setChartType(\"pie\")}}\r\n                        disabled={chartType === \"pie\"}\r\n                >\r\n                    Pie Chart\r\n                </button>\r\n            </div>\r\n\r\n            <div className={\"GraphContainer\"}>\r\n                <div style={{height: \"50%\", width: \"50%\"}}>\r\n                    { chartType === \"line\" && (\r\n                        <>\r\n                            <h2>Line chart</h2>\r\n                            <Line options={options} data={lineChartData} />\r\n                        </>\r\n                    )}\r\n                    { chartType === \"pie\" && (\r\n                        <>\r\n                            <h2>Pie Chart</h2>\r\n                            <Pie data={pieData} />\r\n                        </>\r\n                    )}\r\n                </div>\r\n                <div>\r\n                    <select onChange={handleOnChangeMonthPicker}>\r\n                        {\r\n                            monthLabels.map((element, index) => (\r\n                                <option value={element} key={index}>{element}</option>    \r\n                            ))\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        subjects.map((element, index) => {\r\n                            return (\r\n                                <div key={index} className={\"checkboxText\"}>\r\n                                    <input type=\"checkbox\" checked={subjectsDisplayed[element]}\r\n                                        onChange={(e) => {\r\n                                            setSubjectsDisplayed({\r\n                                                ...subjectsDisplayed,\r\n                                                [element]: e.target.checked,\r\n                                            });\r\n                                        }}/>\r\n                                    <p>{element}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}